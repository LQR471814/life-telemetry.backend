// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: services/eczema/v1/api.proto

package eczemav1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "life-telemetry/proto/services/eczema/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EczemaServiceName is the fully-qualified name of the EczemaService service.
	EczemaServiceName = "services.eczema.v1.EczemaService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EczemaServicePushProcedure is the fully-qualified name of the EczemaService's Push RPC.
	EczemaServicePushProcedure = "/services.eczema.v1.EczemaService/Push"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	eczemaServiceServiceDescriptor    = v1.File_services_eczema_v1_api_proto.Services().ByName("EczemaService")
	eczemaServicePushMethodDescriptor = eczemaServiceServiceDescriptor.Methods().ByName("Push")
)

// EczemaServiceClient is a client for the services.eczema.v1.EczemaService service.
type EczemaServiceClient interface {
	Push(context.Context, *connect.Request[v1.PushRequest]) (*connect.Response[v1.PushResponse], error)
}

// NewEczemaServiceClient constructs a client for the services.eczema.v1.EczemaService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEczemaServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EczemaServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &eczemaServiceClient{
		push: connect.NewClient[v1.PushRequest, v1.PushResponse](
			httpClient,
			baseURL+EczemaServicePushProcedure,
			connect.WithSchema(eczemaServicePushMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// eczemaServiceClient implements EczemaServiceClient.
type eczemaServiceClient struct {
	push *connect.Client[v1.PushRequest, v1.PushResponse]
}

// Push calls services.eczema.v1.EczemaService.Push.
func (c *eczemaServiceClient) Push(ctx context.Context, req *connect.Request[v1.PushRequest]) (*connect.Response[v1.PushResponse], error) {
	return c.push.CallUnary(ctx, req)
}

// EczemaServiceHandler is an implementation of the services.eczema.v1.EczemaService service.
type EczemaServiceHandler interface {
	Push(context.Context, *connect.Request[v1.PushRequest]) (*connect.Response[v1.PushResponse], error)
}

// NewEczemaServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEczemaServiceHandler(svc EczemaServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	eczemaServicePushHandler := connect.NewUnaryHandler(
		EczemaServicePushProcedure,
		svc.Push,
		connect.WithSchema(eczemaServicePushMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/services.eczema.v1.EczemaService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EczemaServicePushProcedure:
			eczemaServicePushHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEczemaServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEczemaServiceHandler struct{}

func (UnimplementedEczemaServiceHandler) Push(context.Context, *connect.Request[v1.PushRequest]) (*connect.Response[v1.PushResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("services.eczema.v1.EczemaService.Push is not implemented"))
}
